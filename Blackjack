import simplegui
import random

CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

in_play = False
outcome1 = ""
outcome2 = ""
score = 1
game_over = False


SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        global in_play
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        
        canvas.draw_image(card_images, card_loc, CARD_SIZE, 
                          [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], 
                          CARD_SIZE)
        
class Hand:
    def __init__(self):
        self.deal = []

    def __str__(self):
        s = "Hand contains " 
        s += str(self.deal)
        return s

    def add_card(self, card):
        self.deal.append(Card(card[0], card[1]))

    def get_value(self):
        aces = 0
        value = 0
        for ch in self.deal:
            for key in VALUES:
                if ch.get_rank() == key:
                    value += VALUES[key]
                    if (ch.get_rank() == 'A'):
                        aces += 1
        if (aces > 0) and (value + 10 <= 21):
            value += 10
        return value

    def draw(self, canvas, pos):
        global in_play
        for c in self.deal:
            c.draw(canvas,  pos)
            pos[0] += (CARD_SIZE[0] + 3)
        
        
class Deck:
    def __init__(self):
        c_deck = []
        s_deck = []
        h_deck = []
        d_deck = []
        self.deck = []
        card_count = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        count = 1
        for c in card_count:
            if c == 1:
                c_deck.append(Card('C', 'A'))
            if (c > 1) and (c < 10):
                c_deck.append(Card('C', str(count)))
            if c == 10:
                c_deck.append(Card('C', 'T'))
            if c == 11:
                c_deck.append(Card('C', 'J'))
            if c == 12:
                c_deck.append(Card('C', 'Q'))
            if c == 13:
                c_deck.append(Card('C', 'K'))
            self.deck.append(str(c_deck[count-1]))
            count += 1            
        count = 1
        for c in card_count:
            if c == 1:
                s_deck.append(Card('S', 'A'))
            if (c > 1) and (c < 10):
                s_deck.append(Card('S', str(count)))
            if c == 10:
                s_deck.append(Card('S', 'T'))
            if c == 11:
                s_deck.append(Card('S', 'J'))
            if c == 12:
                s_deck.append(Card('S', 'Q'))
            if c == 13:
                s_deck.append(Card('S', 'K'))
            self.deck.append(str(s_deck[count-1]))
            count += 1
        count = 1
        for c in card_count:
            if c == 1:
                h_deck.append(Card('H', 'A'))
            if (c > 1) and (c < 10):
                h_deck.append(Card('H', str(count)))
            if c == 10:
                h_deck.append(Card('H', 'T'))
            if c == 11:
                h_deck.append(Card('H', 'J'))
            if c == 12:
                h_deck.append(Card('H', 'Q'))
            if c == 13:
                h_deck.append(Card('H', 'K'))
            self.deck.append(str(h_deck[count-1]))
            count += 1
        count = 1
        for c in card_count:
            if c == 1:
                d_deck.append(Card('D', 'A'))
            if (c > 1) and (c < 10):
                d_deck.append(Card('D', str(count)))
            if c == 10:
                d_deck.append(Card('D', 'T'))
            if c == 11:
                d_deck.append(Card('D', 'J'))
            if c == 12:
                d_deck.append(Card('D', 'Q'))
            if c == 13:
                d_deck.append(Card('D', 'K'))
            self.deck.append(str(d_deck[count-1]))
            count += 1
    

    def shuffle(self):
       random.shuffle(self.deck)

    def deal_card(self):
        c = self.deck.pop()
        return c
    
    def __str__(self):
        return "Deck contains" + str(self.deck)



def deal():
    global outcome1, outcome2, in_play, deck, player, dealer, game_over, score
    
    deck = Deck()
    deck.shuffle()
    player = Hand()
    dealer = Hand()
    player.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    outcome1 = "Hit or stand?"
    outcome2 = ""
    if game_over == False:
        score -= 1
    
    game_over = False

    if (player.get_value() == 21) and (game_over == False):	
        outcome1 = "Blackjack! New Deal?"
        outcome2 = ""
        score += 1
        game_over = True

    
    
    in_play = True

def hit():
    global outcome1, outcome2, in_play, score, game_over
    if game_over == False:
        if (player.get_value() <= 21) and (in_play == True):
            player.add_card(deck.deal_card())
            outcome1 = "Hit or stand?"

   
        if player.get_value() > 21:
            in_play = False
            outcome1 = "You busted. New deal?"
            outcome2 = "Dealer wins."
            if game_over == False:
                score -= 1
                game_over = True
    
      
def stand():
    global outcome1, outcome2, in_play, score, game_over
    in_play = False
    if game_over == False:
        if player.get_value() > 21:
            outcome1 = "You busted. New deal?"
            outcome2 = "Dealer wins."
            if game_over == False:
                score -= 1
                game_over = True
        else:
            while (dealer.get_value() < 17):
                dealer.add_card(deck.deal_card())
            if dealer.get_value() > 21 :
                outcome2 = "Dealer has busted." 
                outcome1 = "Player wins! New deal?"
                if game_over == False:
                    score += 1
                    game_over = True
            else:
                if player.get_value() > dealer.get_value():
                    outcome1 =  "Player wins! New deal?"
                    if game_over == False:
                        score += 1
                        game_over = True
                else:
                    outcome2 = "Dealer wins."
                    outcome1 = "New deal?"
                    if game_over == False:
                        score -= 1
                        game_over = True

def draw(canvas):
    global player, dealer, outcome1, outcome2, in_play
    
    dealer.draw(canvas, [30, 130])
    player.draw(canvas, [30, 360])
    canvas.draw_text("Dealer", [30, 100], 40, "Black")
    canvas.draw_text("Player", [30, 330], 40, "Black")
    canvas.draw_text(outcome1, [200, 330], 40, "Black")
    canvas.draw_text(outcome2, [200, 100], 40, "Black")
    canvas.draw_text("BLACKJACK", [100, 60], 70, "Black")
    if in_play == True:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, 
                          [30 + CARD_BACK_CENTER[0], 130 + CARD_BACK_CENTER[1]], 
                          CARD_BACK_SIZE)
    canvas.draw_text("Score: " + str(score), [475, 575], 30, "Black")

frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


deal()
frame.start()


